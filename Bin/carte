#!/usr/bin/env python

import os
import subprocess
import click


PROJECT_DIR = '/home/hamasho/devel/navagis/carte'
ENV = None
ENVS = ['local', 'dev1', 'dev2']


def set_defaults(env=None):
    global ENV
    if env:
        ENV = env


def get_ssh_name():
    assert ENV in ENVS
    return f'carte-{ENV}'


def double_quote(item):
    return f'"{item}"' if ' ' in item else item


def exec_shell(comm):
    comm_str = ' '.join([double_quote(item) for item in comm])
    click.echo(f'exec> {comm_str}')
    proc = subprocess.Popen(comm, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = proc.communicate()
    click.echo('\n== STDOUT ==')
    click.echo(out.decode('ascii'))
    err_str = err.decode('ascii')
    if err_str:
        click.echo('== STDERR ==')
        click.echo(err_str)
    if proc.returncode != 0:
        raise RuntimeError(f'invalid return code: {proc.returncode}')


def ssh(comm_str, work_dir='/var/www'):
    exec_shell(['ssh', get_ssh_name(), f'cd {work_dir} && {comm_str}'])


def rsync(from_dir, to_dir, send: bool):
    if send:
        to_dir = f'{get_ssh_name()}:{to_dir}'
    else:
        from_dir = f'{get_ssh_name()}:{from_dir}'
    exec_shell([
        'rsync', '-razv', '-e', 'ssh', '--exclude', '.git', from_dir, to_dir,
    ])


@click.group()
def cli():
    pass


@cli.command()
@click.option('-e', '--env', type=click.Choice(ENVS), default='local')
@click.option('-r', '--restart', is_flag=True)
def update(env, restart):
    'Send edited files to VM and restart servers'
    set_defaults(env=env)
    nm_root = f'{PROJECT_DIR}/carte2/Carte-Viewer/node_modules'
    rsync(f'{nm_root}/carteviewer', '/var/www/Carte-Viewer/node_modules/', send=True)
    if restart:
        ssh('sudo npm run gulp build', '/var/www/Carte-Viewer')
        ssh('sudo ./stop-all.sh', '/var/www/Scripts')
        ssh('sudo ./start-all.sh', '/var/www/Scripts')


@cli.command()
@click.option('-e', '--env', type=click.Choice(ENVS), default='local')
@click.option('-r', '--log-root', type=click.Path(file_okay=False), default='/tmp/logs')
def fetch_logs(env, log_root):
    'Fetch log files from remote'
    set_defaults(env=env)
    log_dirs = [
        'Carte-Admin/app/uut/logs',
        'Carte-Admin/logs',
        'Carte-WebSocket/logs',
        'Carte-Viewer/logs',
    ]
    for log_dir_r in log_dirs:
        log_dir = os.path.join(log_root, log_dir_r)
        os.makedirs(log_dir, exist_ok=True)
        rsync(f'/var/www/{log_dir_r}', os.path.dirname(log_dir), send=False)


if __name__ == "__main__":
    cli()
